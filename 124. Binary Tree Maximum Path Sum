A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in 
the sequence at most once. Note that the path does not need to pass through the root.
The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any non-empty path.

 
Example 1:
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

apporch: path that is distance b/w any two node but node does not appears twice 
for any node path is val+(maxl+maxr) 
for any node which path we choose that decide by max(l,r)+node->val;
if any node has neg val we dont consider it becoz taking neg path never give me max path sum 

 int findpath(TreeNode*root,int &maxi)
    {
        if(root==NULL)
            return 0;
        int l=max(0,findpath(root->left,maxi));
        int r=max(0,findpath(root->right,maxi));
        maxi=max(maxi,l+r+root->val);
        return max(l,r)+root->val;
    }
    
    int maxPathSum(TreeNode* root) {
        
        int maxi=INT_MIN;
        if(root==NULL)
            return 0;
        findpath(root,maxi);
        return maxi;
    }
    t(c)=o(n)
    s(c)=o(n)
